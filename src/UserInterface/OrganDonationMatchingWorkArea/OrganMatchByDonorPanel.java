/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.OrganDonationMatchingWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Entity.Donor;
import Business.Entity.Recipient;
import Business.Network.Network;
import Business.Organization.Organization;
import UserInterface.SystemAdminWorkspace.ManageCitiesNetwork;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amey
 */
public class OrganMatchByDonorPanel extends javax.swing.JPanel {

    EcoSystem ecoSystem;
    JPanel panel;
    Donor donor;
    Recipient recipient;
    List<Donor> donorL;

    /**
     * Creates new form OrganMatchByApplicantPanel
     */
    public OrganMatchByDonorPanel(EcoSystem ecoSystem, JPanel panel, List<Donor> donorL) {
        initComponents();
        this.ecoSystem = ecoSystem;
        this.panel = panel;
        this.donorL = donorL;
        populateDonorTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        donorInfoTable = new javax.swing.JTable();
        findMatchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        recipientInfoTable = new javax.swing.JTable();
        informOrganMatchButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setBackground(java.awt.SystemColor.activeCaption);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        donorInfoTable.setBackground(java.awt.SystemColor.info);
        donorInfoTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        donorInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Applicant (Donor) Name", "Network", "Organ", "Current Organ Availabilty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(donorInfoTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 125, 970, 150));

        findMatchButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        findMatchButton.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        findMatchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/icons8-searching-32.png"))); // NOI18N
        findMatchButton.setText("Click To Find Match");
        findMatchButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        findMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMatchButtonActionPerformed(evt);
            }
        });
        add(findMatchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 300, 260, 60));

        recipientInfoTable.setBackground(java.awt.SystemColor.info);
        recipientInfoTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        recipientInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Recipient Name", "Network", "Organ", "Severity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(recipientInfoTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 399, 980, 170));

        informOrganMatchButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        informOrganMatchButton.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        informOrganMatchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/icons8-new-message-32.png"))); // NOI18N
        informOrganMatchButton.setText("Click To Inform Match");
        informOrganMatchButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        informOrganMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informOrganMatchButtonActionPerformed(evt);
            }
        });
        add(informOrganMatchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 610, 290, 60));

        backButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/left-arrow-in-circular-button-black-symbol-2.png"))); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backButton.setFocusTraversalPolicyProvider(true);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 22, 130, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void findMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMatchButtonActionPerformed

        int selectedRow = donorInfoTable.getSelectedRow();

        if (selectedRow >= 0) {
            Donor donorInfo = (Donor) donorInfoTable.getValueAt(selectedRow, 0);
            String network = (String) donorInfoTable.getValueAt(selectedRow, 1);
            donor = donorInfo;
            List<String> organsList = donor.getOrganList();
            populateRecipientToTable(network, organsList);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_findMatchButtonActionPerformed

    void populateDonortabel() {
        DefaultTableModel dtm = (DefaultTableModel) donorInfoTable.getModel();
        dtm.setRowCount(0);
        for (Donor donor : donorL) {
            Object[] row = new Object[4];
            row[0] = donor;
            row[1] = donor.getNetwork();
            row[2] = donor.getOrganList();
            row[3] = donor.isIsOrganAvailable();
            dtm.addRow(row);
        }
    }

    private void populateDonorTable() {

        DefaultTableModel model = (DefaultTableModel) donorInfoTable.getModel();

        model.setRowCount(0);

        for (Donor donor : donorL) {
            Object[] row = new Object[4];
            row[0] = donor;
            row[1] = donor.getNetwork();
            row[2] = donor.getOrganList();
            row[3] = donor.isIsOrganAvailable();

            model.addRow(row);
        }
    }

    private void populateRecipientToTable(String network, List<String> organList) {
        System.out.println("Populate receipient table");
        DefaultTableModel dtm = (DefaultTableModel) recipientInfoTable.getModel();
        List<Recipient> recipientL = new ArrayList<Recipient>();
        dtm.setRowCount(0);

        for (Network n : ecoSystem.getNetworks()) {
            for (Enterprise enterprise : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof HospitalEnterprise) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization.getName().equalsIgnoreCase("Applicant Org")) {
                            for (Recipient rec : organization.getRecipientDirectory().getRecipientRecords()) {
                                int priorityNo = rec.getPriorityNo();
                                if ((organList.contains(rec.getOrganType())) && (priorityNo > 0)) {
                                    rec.setNetwork(network);
                                    recipientL.add(rec);
                                }
                            }
                        }
                    }
                }
            }
        }

        Collections.sort(recipientL, new Comparator<Recipient>() {

            @Override
            public int compare(Recipient rec1, Recipient rec2) {
                return rec2.compareTo(rec1);
            }
        });

        for (Recipient recipient1 : recipientL) {
            Object[] row = new Object[4];
            row[0] = recipient1;
            row[1] = recipient1.getNetwork();
            row[2] = recipient1.getOrganType();
            row[3] = recipient1.getPriorityNo();
            dtm.addRow(row);
        }

    }

    private void informOrganMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informOrganMatchButtonActionPerformed

        int selectedRow = recipientInfoTable.getSelectedRow();
        if (selectedRow >= 0) {
            recipient = (Recipient) recipientInfoTable.getValueAt(selectedRow, 0);

            sendOutEmail(recipient.getPersonEmailId());
            sendOutEmail(donor.getPersonEmailId());

            JOptionPane.showMessageDialog(null, "Email has been sent successfully regarding Organ match");
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_informOrganMatchButtonActionPerformed

    private void sendOutEmail(String emailID) {
        final String tosend = emailID;
        boolean sessionDebug = false;
        //String sender = "taskplannermernproject@gmail.com";
        String hostname = "smtp.gmail.com";
        // String userName = "taskplannermernproject@gmail.com";
        //String password = "taskplannermernproject@123";
        String password = "Pass@1234";
        String sender = "organdonationaed@gmail.com";
        String userName = "organdonationaed@gmail.com";
        Properties prop = System.getProperties();
        prop.setProperty("mail.smtp.host", hostname);
        prop.put("mail.smtp.starttls.required", "true");
        prop.put("mail.smtp.starttls.enable", "true");
        prop.put("mail.smtp.host", hostname);
        prop.put("mail.smtp.port", "587");
        prop.put("mail.smtp.auth", "true");

        java.security.Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());

        Session session;
        session = Session.getDefaultInstance(prop, null);
        session.setDebug(sessionDebug);

        try {
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(sender));
            msg.setRecipient(Message.RecipientType.TO, new InternetAddress(tosend));
            InternetAddress add;
            add = new InternetAddress(tosend);
            msg.setSubject("Match Organ Details!!");
            msg.setText("Paring Details are as follows: Donor :: " + donor.getPersonEmailId() + " with Recipient:: " + recipient.getPersonEmailId()
                    + " for organ transplant.");

            Transport transport = session.getTransport("smtp");
            transport.connect(hostname, userName, password);
            transport.sendMessage(msg, msg.getAllRecipients());
            transport.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Encountered error while sending Email!!");
        }
    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed

        ManageOrganMatchInitialRoute manageNetworksJPanel = new ManageOrganMatchInitialRoute(ecoSystem, panel);
        panel.add("manageCitiesJPanel", manageNetworksJPanel);
        CardLayout layout = (CardLayout) panel.getLayout();
        layout.next(panel);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTable donorInfoTable;
    private javax.swing.JButton findMatchButton;
    private javax.swing.JButton informOrganMatchButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable recipientInfoTable;
    // End of variables declaration//GEN-END:variables
}
