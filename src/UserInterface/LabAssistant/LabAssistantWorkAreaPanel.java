/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.LabAssistant;

import Business.EcoSystem;

import Business.Enterprise.Enterprise;

import Business.Organization.InternalLabOrg;

import Business.Organization.Organization;

import Business.Role.LabAssistantRole;

import Business.Role.InternalLabAssistantRole;

import Business.UserAccount.UserAccount;

import Business.WorkQueue.LabTestWorkRequest;

import Business.WorkQueue.WorkRequest;

import java.awt.CardLayout;

import java.awt.Font;

import javax.swing.JOptionPane;

import javax.swing.JPanel;

import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Amey
 */
public class LabAssistantWorkAreaPanel extends javax.swing.JPanel {
    
    JPanel rightPanel;
    EcoSystem ecosystem;
    Enterprise enterprise;
    Organization organization;
    UserAccount userAccount;
    /**
     * Creates new form NewJPanel
     */
    public LabAssistantWorkAreaPanel(JPanel rightPanel, EcoSystem ecosystem, Enterprise enterprise, Organization organization, UserAccount userAccount) {
        initComponents();
        
        this.ecosystem = ecosystem;
        
        this.organization = (InternalLabOrg)organization;
        
        this.userAccount = userAccount;
        
        this.rightPanel = rightPanel;
        
        methodToPopulateTableData();
        
        labAssitantWorkRequestTable.getTableHeader().setFont(new Font("Times New Roman" , Font.ITALIC,23));
    }
    public LabAssistantWorkAreaPanel(JPanel rightPanel, EcoSystem ecosystem, Enterprise enterprise, UserAccount userAccount) {
        
        initComponents();
        
        this.ecosystem = ecosystem;
        
        this.enterprise = enterprise;
        
        this.userAccount = userAccount;
        
        this.rightPanel = rightPanel;
        
        methodToPopulateTableEnterprise();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        labAssitantWorkRequestTable = new javax.swing.JTable();
        assignToMeButton = new javax.swing.JButton();
        processButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labAssitantWorkRequestTable.setBackground(new java.awt.Color(0, 153, 255));
        labAssitantWorkRequestTable.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        labAssitantWorkRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(labAssitantWorkRequestTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 68, 1090, 180));

        assignToMeButton.setBackground(new java.awt.Color(153, 204, 255));
        assignToMeButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        assignToMeButton.setText("Assign to me");
        assignToMeButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        assignToMeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToMeButtonActionPerformed(evt);
            }
        });
        add(assignToMeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 325, 300, 40));

        processButton.setBackground(new java.awt.Color(153, 204, 255));
        processButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        processButton.setText("Process");
        processButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });
        add(processButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(811, 325, 300, 40));
    }// </editor-fold>//GEN-END:initComponents
    
    public void methodToPopulateTableData () {
        
        DefaultTableModel tableModel = (DefaultTableModel)labAssitantWorkRequestTable.getModel();
        
        tableModel.setRowCount(0);
        
        for(WorkRequest workRequestObject : organization.getWorkQueue().getWorkRequestList()){
            Object[] labAssistantTableRow = new Object[4];
            
            labAssistantTableRow[0] = workRequestObject;
            
            labAssistantTableRow[1] = workRequestObject.getSender().getEmployee().getEmpName();
            
            labAssistantTableRow[2] = workRequestObject.getReceiver() == null 
                    ? null 
                    : workRequestObject.getReceiver().getEmployee().getEmpName();
            
            labAssistantTableRow[3] = workRequestObject.getStatus();
            
            tableModel.addRow(labAssistantTableRow);
        }
    }
    
    
    public void methodToPopulateTableEnterprise () {
        
        DefaultTableModel tableModel = (DefaultTableModel)labAssitantWorkRequestTable.getModel();
        
        tableModel.setRowCount(0);
        
        for(Organization organizationObject : enterprise.getOrganizationDirectory().getOrganizationList()){
            
            for(WorkRequest requestOfWork: organizationObject.getWorkQueue().getWorkRequestList()){
                
            Object[] labAssistantTableRow = new Object[4];
            
            labAssistantTableRow[0] = requestOfWork;
            
            labAssistantTableRow[1] = requestOfWork.getSender().getEmployee().getEmpName();
            
            labAssistantTableRow[2] = requestOfWork.getReceiver() == null 
                    ? null 
                    : requestOfWork.getReceiver().getEmployee().getEmpName();
            
            labAssistantTableRow[3] = requestOfWork.getStatus();
            
            tableModel.addRow(labAssistantTableRow);
          
            }
        }
    }
    
    private void assignToMeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToMeButtonActionPerformed
        int selectedRowOfTable = labAssitantWorkRequestTable.getSelectedRow();

        if(labAssitantWorkRequestTable.getRowCount()==0){
            JOptionPane.showMessageDialog(null, "No rows present to select.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (selectedRowOfTable < 0){
            JOptionPane.showMessageDialog(null, "Please select a row.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest requestOfWork = (WorkRequest)labAssitantWorkRequestTable.getValueAt(selectedRowOfTable, 0);
        
        requestOfWork.setReceiver(userAccount);
        
        requestOfWork.setStatus("Pending");
        
        if(userAccount.getRole() instanceof LabAssistantRole){
            
           methodToPopulateTableEnterprise(); 
        } else if(userAccount.getRole() instanceof InternalLabAssistantRole){
            
            methodToPopulateTableData();
        }
    }//GEN-LAST:event_assignToMeButtonActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        int selectedRowOfTable = labAssitantWorkRequestTable.getSelectedRow();

        if(labAssitantWorkRequestTable.getRowCount()==0){
            JOptionPane.showMessageDialog(null, "There are no rows present in the Table to Select.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (selectedRowOfTable < 0){
            JOptionPane.showMessageDialog(null, "Please, Select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        LabTestWorkRequest labTestWorkRequest = (LabTestWorkRequest)labAssitantWorkRequestTable.getValueAt(selectedRowOfTable, 0);

        labTestWorkRequest.setStatus("Processing");

        TestResultUploadPanel processWorkRequestJPanel = new TestResultUploadPanel(rightPanel, labTestWorkRequest, userAccount);
        
        rightPanel.add("processWorkRequestJPanel", processWorkRequestJPanel);
        
        CardLayout cardLayout = (CardLayout) rightPanel.getLayout();
        
        cardLayout.next(rightPanel);
    }//GEN-LAST:event_processButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignToMeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable labAssitantWorkRequestTable;
    private javax.swing.JButton processButton;
    // End of variables declaration//GEN-END:variables
}
