/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Campaign;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.FundingEnterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Entity.Applicant;
import Business.Entity.ApplicantDirectory;
import Business.Entity.CampaignEvent;
import Business.Network.Network;
import Business.Organization.ApplicantOrg;
import Business.Organization.CorporateFundOrg;
import Business.Organization.TrustFundOrg;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Utils.Utils;
import Business.WorkQueue.AwarenessWorkRequest;
import Business.WorkQueue.FundingWorkRequest;
import Business.WorkQueue.WorkRequest;
import UserInterface.FundsRetrieval.FundsRequestStatusPanel;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amey
 */
public class AwarenessCampaignInitiator extends javax.swing.JPanel {

    EcoSystem ecoSystem;
    JPanel panel;
    private Enterprise enterprise;
    private UserAccount userAccount;
    ApplicantDirectory appDirectory = new ApplicantDirectory();
    Utils utility;
    /**
     * Creates new form AwarenessCampaignInitiator
     */
    public AwarenessCampaignInitiator(EcoSystem ecoSystem, JPanel panel, Enterprise enterprise, UserAccount userAccount) {
        
        initComponents();
        this.ecoSystem = ecoSystem;
        this.panel = panel;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        
        populateEventTable();
        populateNetworkList();
        populatecampTable();
    }
    
    public void populatecampTable(){
        DefaultTableModel dtm = (DefaultTableModel)jTable1.getModel();
        dtm.setRowCount(0);
        
        for (Network network1 : ecoSystem.getNetworks()) {
            for (Enterprise enterprise : network1.getEnterpriseDirectory().getEnterpriseList()) {
                if(enterprise instanceof HospitalEnterprise){
                    for(WorkRequest wr : enterprise.getWorkQueue().getWorkRequestList()){
                        Object[] row = new Object[4];
                        AwarenessWorkRequest req = (AwarenessWorkRequest)wr;
                        row[0] = wr;
                        row[1] = req.getOrgans();
                        row[2] = wr.getStatus();
                        row[3] = wr.getSender();
                
                        dtm.addRow(row);
                    }
                }
            }

        }

    }
    public void populateEventTable(){
        
        DefaultTableModel dtm = (DefaultTableModel)displayScheduledEventsTable.getModel();
        dtm.setRowCount(0);
        
        if(ecoSystem != null && ecoSystem.getCampaignList() != null){
            for(CampaignEvent campaign : ecoSystem.getCampaignList()){
                Object[] row = new Object[4];
                row[0] = campaign.getCampaignName();
                row[1] = campaign.getNetworkName();
                row[2] = campaign.getDate();
                row[3] = campaign.getMoney();
                
                dtm.addRow(row);
            }
            
        }
    }
    
    public void populateNetworkList(){
        
        chooseCityFormComboBox.removeAllItems();
        for(Network networkName : ecoSystem.getNetworks()){
            chooseCityFormComboBox.addItem(networkName);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scheduledEventTableLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        displayScheduledEventsTable = new javax.swing.JTable();
        chooseCityFormLabel = new javax.swing.JLabel();
        chooseCityFormComboBox = new javax.swing.JComboBox();
        eventDateFormLabel = new javax.swing.JLabel();
        setupEventBtn = new javax.swing.JButton();
        eventNameFormLabel = new javax.swing.JLabel();
        eventNameFromTextField = new javax.swing.JTextField();
        requestFundsFormTextField = new javax.swing.JTextField();
        requestFundsFormLabel = new javax.swing.JLabel();
        requestFundsFormCurrencyLabel = new javax.swing.JLabel();
        fundsRequestStatusBtn = new javax.swing.JButton();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        reqCorporateFunds = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        assignButton1 = new javax.swing.JButton();
        approveButton2 = new javax.swing.JButton();
        declineButton3 = new javax.swing.JButton();

        setBackground(java.awt.SystemColor.activeCaption);
        setLayout(null);

        scheduledEventTableLabel.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        scheduledEventTableLabel.setText("Scheduled Event Details");
        add(scheduledEventTableLabel);
        scheduledEventTableLabel.setBounds(30, 280, 300, 27);

        displayScheduledEventsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Event Name", "Network", "Date", "Funds"
            }
        ));
        jScrollPane3.setViewportView(displayScheduledEventsTable);

        add(jScrollPane3);
        jScrollPane3.setBounds(30, 320, 949, 137);

        chooseCityFormLabel.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        chooseCityFormLabel.setText("Choose City:");
        add(chooseCityFormLabel);
        chooseCityFormLabel.setBounds(80, 480, 150, 25);

        chooseCityFormComboBox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        chooseCityFormComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(chooseCityFormComboBox);
        chooseCityFormComboBox.setBounds(220, 480, 170, 33);

        eventDateFormLabel.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        eventDateFormLabel.setText("Date of Event:");
        add(eventDateFormLabel);
        eventDateFormLabel.setBounds(60, 540, 160, 25);

        setupEventBtn.setBackground(java.awt.SystemColor.controlLtHighlight);
        setupEventBtn.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        setupEventBtn.setText("Setup Event for Trust");
        setupEventBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setupEventBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupEventBtnActionPerformed(evt);
            }
        });
        add(setupEventBtn);
        setupEventBtn.setBounds(140, 590, 290, 50);

        eventNameFormLabel.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        eventNameFormLabel.setText("Name of Event:");
        add(eventNameFormLabel);
        eventNameFormLabel.setBounds(570, 490, 138, 25);

        eventNameFromTextField.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        add(eventNameFromTextField);
        eventNameFromTextField.setBounds(750, 480, 147, 33);

        requestFundsFormTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestFundsFormTextFieldActionPerformed(evt);
            }
        });
        add(requestFundsFormTextField);
        requestFundsFormTextField.setBounds(750, 540, 147, 33);

        requestFundsFormLabel.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        requestFundsFormLabel.setText("Request Funds:");
        add(requestFundsFormLabel);
        requestFundsFormLabel.setBounds(570, 540, 180, 25);

        requestFundsFormCurrencyLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        requestFundsFormCurrencyLabel.setText("$");
        add(requestFundsFormCurrencyLabel);
        requestFundsFormCurrencyLabel.setBounds(730, 540, 18, 28);

        fundsRequestStatusBtn.setBackground(new java.awt.Color(153, 204, 255));
        fundsRequestStatusBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fundsRequestStatusBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/process.png"))); // NOI18N
        fundsRequestStatusBtn.setText("Funds Reqested Status");
        fundsRequestStatusBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        fundsRequestStatusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fundsRequestStatusBtnActionPerformed(evt);
            }
        });
        add(fundsRequestStatusBtn);
        fundsRequestStatusBtn.setBounds(310, 660, 361, 50);
        add(jDateChooser2);
        jDateChooser2.setBounds(220, 540, 170, 32);

        reqCorporateFunds.setBackground(java.awt.SystemColor.controlLtHighlight);
        reqCorporateFunds.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        reqCorporateFunds.setText("Setup Event for Corporates");
        reqCorporateFunds.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        reqCorporateFunds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqCorporateFundsActionPerformed(evt);
            }
        });
        add(reqCorporateFunds);
        reqCorporateFunds.setBounds(540, 590, 360, 50);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Organs", "Status", "Sender"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 60, 950, 130);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("Details of Awareness Camp Requests by Hospital");
        add(jLabel1);
        jLabel1.setBounds(30, 10, 540, 40);

        assignButton1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        assignButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/icons8-audit-24.png"))); // NOI18N
        assignButton1.setText("Assign to me");
        assignButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButton1ActionPerformed(evt);
            }
        });
        add(assignButton1);
        assignButton1.setBounds(400, 210, 200, 30);

        approveButton2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        approveButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/check.png"))); // NOI18N
        approveButton2.setText("Approve");
        approveButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveButton2ActionPerformed(evt);
            }
        });
        add(approveButton2);
        approveButton2.setBounds(30, 210, 160, 30);

        declineButton3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        declineButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/close.png"))); // NOI18N
        declineButton3.setText("Decline");
        declineButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineButton3ActionPerformed(evt);
            }
        });
        add(declineButton3);
        declineButton3.setBounds(820, 210, 160, 30);
    }// </editor-fold>//GEN-END:initComponents

    //Method to check common validation for Trust and Corporate
    private boolean checkValidaion(Network networkName, String campaignName, Date eventDate){
        
        boolean value = true;
        
        Date date = new Date();
        Date today = new java.sql.Date (date.getTime());
 
        try{
        if(networkName.equals(null)){
            JOptionPane.showMessageDialog(null, "Please select city for the event");
            return false;
        }else if(campaignName.equals("")){
            JOptionPane.showMessageDialog(null, "Please add the event Name ");
            return false;
        }else if(eventDate.equals(null)){
            JOptionPane.showMessageDialog(null, "Please select the date for the event");
            return false;
        }else if(requestFundsFormTextField.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please enter the amount of funds required");
            return false;
        }
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please enter values for all the fields");
            return false;
        }
        /*
        if(!(utility.isValidCampaign(campaignName))){
            JOptionPane.showMessageDialog(null, "Campign Name is not valid");
            return;
        }*/
        
        //Validate Date
        try{
            if(eventDate.compareTo(today) < 0){
                JOptionPane.showMessageDialog(null,"Please select a valid date for the event");
               return false;
            }
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please add the date");
            return false;
        }
        
        return value;
        //Handle exception for funds 
        
    }
    
    
    private void setupEventBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupEventBtnActionPerformed

        Network networkName = (Network) chooseCityFormComboBox.getSelectedItem();
        String campaignName = eventNameFromTextField.getText();
        Date eventDate = jDateChooser2.getDate();
        String money = requestFundsFormTextField.getText();
  
        Date date = new Date();
        Date today = new java.sql.Date (date.getTime());
 
        try{
        if(networkName.equals(null)){
            JOptionPane.showMessageDialog(null, "Please select city for the event");
            return;
        }else if(campaignName.equals("")){
            JOptionPane.showMessageDialog(null, "Please add the event Name ");
            return;
        }else if(eventDate.equals(null)){
            JOptionPane.showMessageDialog(null, "Please select the date for the event");
            return;
        }else if(requestFundsFormTextField.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please enter the amount of funds required");
            return;
        }
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please enter values for all the fields");
            return;
        }
        
        //Field validation for event name
       utility = new Utils();
       if(!utility.isValidName(campaignName)){
           JOptionPane.showMessageDialog(null, "Please enter valid name for the event");
            return;
       }
        /*
        if(!(utility.isValidCampaign(campaignName))){
            JOptionPane.showMessageDialog(null, "Campign Name is not valid");
            return;
        }*/
        
        //Validate Date
        try{
            if(eventDate.compareTo(today) < 0){
                JOptionPane.showMessageDialog(null,"Please select a valid date for the event");
               return;
            }
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please select the date for the event");
            return;
        }
        
      
        //Handle exception for funds 
        
        float money1 = 0;
        try{
            money1 = Float.parseFloat(money);
            requestFundsFormTextField.setText("");
            
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Please add valid amount of funds");
                  return ; 
        }
        
        //Send email to all the applicants
        if(ecoSystem != null){
            for(Applicant applicant : appDirectory.getApplicantRecords()){
                utility.sendEmail(applicant.getApplicantEmailId(), campaignName, String.valueOf(eventDate), String.valueOf(networkName));
            }
            
            for(Network network: ecoSystem.getNetworks()){
                if(network.getName().equals(String.valueOf(networkName))){
                  for(Enterprise enterprise :   network.getEnterpriseDirectory().getEnterpriseList()){
                    for (Organization organisation : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if(organisation instanceof ApplicantOrg){
                    }
                    }
                  }
                }
            }
        }
        
        FundingWorkRequest req = new FundingWorkRequest();
        req.setMessage("Kindly provide approval for the requested funds!!");
        req.setSender(userAccount);
        req.setStatus("Sent");
        req.setCampaign(eventNameFromTextField.getText());
        req.setAmount(money1);
        req.setEventName(campaignName);
        req.setFundType("Trust");

        
        Organization org1 = null;
         for(Network network : ecoSystem.getNetworks()){          
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                if(enterprise instanceof FundingEnterprise){
                   
                    for(Organization org :  enterprise.getOrganizationDirectory().getOrganizationList()){  
                        System.out.println(org.toString());
                       if(org instanceof TrustFundOrg){
                           org1 = org; 
                           System.out.println(org1.toString());
                       }
                   }
                }
            }
        }
        if(org1 != null){    
            org1.getWorkQueue().getWorkRequestList().add(req);
            userAccount.getWorkQueue().getWorkRequestList().add(req);
            System.out.println(org1.getWorkQueue().getWorkRequestList());
            System.out.println(userAccount.getWorkQueue().getWorkRequestList());
        }
        
        CampaignEvent campaign = ecoSystem.createCampaign();
        campaign.setCampaignName(campaignName);
        campaign.setNetworkName(networkName.getName());
        campaign.setDate(eventDate);
        campaign.setMoney(money1);
        
        JOptionPane.showMessageDialog(null, "Awareness event created successfully.");
        eventNameFromTextField.setText("");
        jDateChooser2.setDate(eventDate);
        requestFundsFormTextField.setText("");
        populateEventTable();
           
    }//GEN-LAST:event_setupEventBtnActionPerformed

    private void requestFundsFormTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestFundsFormTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_requestFundsFormTextFieldActionPerformed

    private void fundsRequestStatusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fundsRequestStatusBtnActionPerformed
        
        FundsRequestStatusPanel freqPanel = new FundsRequestStatusPanel(enterprise, panel, userAccount);
        panel.add("FundRequestStatusJPanel", freqPanel);
        CardLayout layout = (CardLayout) panel.getLayout();
        layout.next(panel);
    }//GEN-LAST:event_fundsRequestStatusBtnActionPerformed

    private void reqCorporateFundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqCorporateFundsActionPerformed
        // TODO add your handling code here:
        Network networkName = (Network) chooseCityFormComboBox.getSelectedItem();
        String campaignName = eventNameFromTextField.getText();
        Date eventDate = jDateChooser2.getDate();
        String money = requestFundsFormTextField.getText();
        
        //Validate fields
        Date date = new Date();
        Date today = new java.sql.Date (date.getTime());
 
        try{
        if(networkName.equals(null)){
            JOptionPane.showMessageDialog(null, "Please select city for the event");
            return;
        }else if(campaignName.equals("")){
            JOptionPane.showMessageDialog(null, "Please add the event Name ");
            return;
        }else if(eventDate.equals(null)){
            JOptionPane.showMessageDialog(null, "Please select the date for the event");
            return;
        }else if(requestFundsFormTextField.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please enter the amount of funds required");
            return;
        }
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please enter values for all the fields");
            return;
        }
        /*
        if(!(utility.isValidCampaign(campaignName))){
            JOptionPane.showMessageDialog(null, "Campign Name is not valid");
            return;
        }*/
        
        //Validate Date
        try{
            if(eventDate.compareTo(today) < 0){
                JOptionPane.showMessageDialog(null,"Please select a valid date for the event");
               return;
            }
        }catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Please add the date");
            return;
        }
        
       
        //Handle exception for funds 
        
        //Check validation for funds
        float money1 = 0;
        try{
            money1 = Float.parseFloat(money);
            requestFundsFormTextField.setText("");
            
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Please add correct amount of funds");
                  return ; 
        }
        
        //Send email to all the applicants
        if(ecoSystem != null){
            System.out.println("####LP#### Befoer sending email");
            for(Applicant applicant : appDirectory.getApplicantRecords()){
                utility.sendEmail(applicant.getApplicantEmailId(), campaignName, String.valueOf(eventDate), String.valueOf(networkName));
            }
            
            for(Network network: ecoSystem.getNetworks()){
                if(network.getName().equals(String.valueOf(networkName))){
                  for(Enterprise enterprise :   network.getEnterpriseDirectory().getEnterpriseList()){
                    for (Organization organisation : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if(organisation instanceof ApplicantOrg){
                           //LP Please add code later!!!
                    }
                    }
                  }
                }
            }
        }
        
        FundingWorkRequest req = new FundingWorkRequest();
        req.setMessage("Kindly provide approval for the requested funds!!");
        req.setSender(userAccount);
        req.setStatus("Sent");
        req.setCampaign(eventNameFromTextField.getText());
        req.setAmount(money1);
        req.setEventName(campaignName);
        req.setFundType("Corporate");

        
        Organization org1 = null;
         for(Network network : ecoSystem.getNetworks()){          
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                System.out.println("####LP#### Enterprise" +enterprise.toString());
                if(enterprise instanceof FundingEnterprise){
                   
                    for(Organization org :  enterprise.getOrganizationDirectory().getOrganizationList()){  
                        System.out.println("####LP####");
                        System.out.println(org.toString());
                       if(org instanceof CorporateFundOrg){
                           org1 = org; 
                           System.out.println("####LP####");
                           System.out.println(org1.toString());
                       }
                   }
                }
            }
        }
        if(org1 != null){
            System.out.println("####LP####");
            System.out.println(org1);
            
            org1.getWorkQueue().getWorkRequestList().add(req);
            userAccount.getWorkQueue().getWorkRequestList().add(req);
            System.out.println(org1.getWorkQueue().getWorkRequestList());
            System.out.println(userAccount.getWorkQueue().getWorkRequestList());
        }
        
        CampaignEvent campaign = ecoSystem.createCampaign();
        campaign.setCampaignName(campaignName);
        campaign.setNetworkName(networkName.getName());
        campaign.setDate(eventDate);
        campaign.setMoney(money1);
        
        JOptionPane.showMessageDialog(null, "Awareness event created successfully.");
        eventNameFromTextField.setText("");
        jDateChooser2.setDate(eventDate);
        requestFundsFormTextField.setText("");
        populateEventTable();
    }//GEN-LAST:event_reqCorporateFundsActionPerformed

    private void approveButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveButton2ActionPerformed
         // TODO add your handling code here:
         int selectedRow = jTable1.getSelectedRow();

        if(jTable1.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "No rows available to select", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        AwarenessWorkRequest request = (AwarenessWorkRequest)jTable1.getValueAt(selectedRow, 0);
        if( request.getStatus().equalsIgnoreCase("Approved") || request.getStatus().equalsIgnoreCase("Declined")){
            JOptionPane.showMessageDialog(null, "The request has already been Approved/Declined", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }else if(request.getStatus().equalsIgnoreCase("Sent")){
            JOptionPane.showMessageDialog(null, "Please assign therequest first!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }else if(request.getStatus().equalsIgnoreCase("Assigned")){
           request.setStatus("Approved"); 
        JOptionPane.showMessageDialog(null, "The request has already been Approved successfully!");
        populatecampTable();
        }
        
    }//GEN-LAST:event_approveButton2ActionPerformed

    private void assignButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

        if(jTable1.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "No rows available to select", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        AwarenessWorkRequest request = (AwarenessWorkRequest)jTable1.getValueAt(selectedRow, 0);
        if(request.getStatus().equalsIgnoreCase("Assigned") ){
            JOptionPane.showMessageDialog(null, "The request has already been Assigned", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }else if(request.getStatus().equalsIgnoreCase("Approved") || request.getStatus().equalsIgnoreCase("Declined")){
            JOptionPane.showMessageDialog(null, "The request has already been Approved/Declined", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        request.setStatus("Assigned");
        JOptionPane.showMessageDialog(null, "The request has been Assigned successfully!!");
        populatecampTable();

    }//GEN-LAST:event_assignButton1ActionPerformed

    private void declineButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineButton3ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

        if(jTable1.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "No rows available to select", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        AwarenessWorkRequest request = (AwarenessWorkRequest)jTable1.getValueAt(selectedRow, 0);
        if( request.getStatus().equalsIgnoreCase("Approved") || request.getStatus().equalsIgnoreCase("Declined")){
            JOptionPane.showMessageDialog(null, "The request has already been Approved/Declined", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }else if(request.getStatus().equalsIgnoreCase("Sent")){
            JOptionPane.showMessageDialog(null, "Please assign the request first!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }else if(request.getStatus().equalsIgnoreCase("Assigned")){
           request.setStatus("Declined"); 
           JOptionPane.showMessageDialog(null, "The request has been Declined successfully!!");
        populatecampTable();
        }

    }//GEN-LAST:event_declineButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveButton2;
    private javax.swing.JButton assignButton1;
    private javax.swing.JComboBox chooseCityFormComboBox;
    private javax.swing.JLabel chooseCityFormLabel;
    private javax.swing.JButton declineButton3;
    private javax.swing.JTable displayScheduledEventsTable;
    private javax.swing.JLabel eventDateFormLabel;
    private javax.swing.JLabel eventNameFormLabel;
    private javax.swing.JTextField eventNameFromTextField;
    private javax.swing.JButton fundsRequestStatusBtn;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton reqCorporateFunds;
    private javax.swing.JLabel requestFundsFormCurrencyLabel;
    private javax.swing.JLabel requestFundsFormLabel;
    private javax.swing.JTextField requestFundsFormTextField;
    private javax.swing.JLabel scheduledEventTableLabel;
    private javax.swing.JButton setupEventBtn;
    // End of variables declaration//GEN-END:variables
}
