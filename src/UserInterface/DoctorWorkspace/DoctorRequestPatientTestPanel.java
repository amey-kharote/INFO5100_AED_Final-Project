/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorWorkspace;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.LabEnterprise;
import Business.Entity.Donor;
import Business.Entity.Recipient;
import Business.Network.Network;
import Business.Organization.InternalLabOrg;
import Business.Organization.Organization;
import Business.Organization.PathologyOrg;
import Business.Organization.RadiologyOrg;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DonorValidationWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Amey
 */
public class DoctorRequestPatientTestPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorRequestPatientTestPanel
     */
    JPanel rightJPanel;
    Enterprise enterprise;
    private UserAccount account;
    EcoSystem business;

    void populatePatientIdDropdown() {
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (Donor donorObj : org.getDonorDirectory().getDonorRecords()) {
                if (account.getUsername().equalsIgnoreCase(donorObj.getDocAssignedEmaild())) {
                    donorComboName.addItem(donorObj);
                }
            }
            for (Recipient rObj : org.getRecipientDirectory().getRecipientRecords()) {
                // validate if patient is not assigned to a doctor or assigned to the same doctor
                if (!rObj.isIsDocAssigned() || account.getUsername().equalsIgnoreCase(rObj.getDocAssignedEmaild())) {
                    patientNameCombobox.addItem(rObj);
                }
            }
        }
    }

    public DoctorRequestPatientTestPanel(JPanel rightJPanel, Enterprise enterprise, UserAccount account, EcoSystem business) {
        initComponents();
        this.rightJPanel = rightJPanel;
        this.enterprise = enterprise;
        this.account = account;
        this.business = business;
        populatePatientIdDropdown();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        askToTakeTestButton = new javax.swing.JButton();
        bloodTestCheckbox = new javax.swing.JCheckBox();
        cancerCheckbox = new javax.swing.JCheckBox();
        patientEmailDropdownLabel = new javax.swing.JLabel();
        patientNameCombobox = new javax.swing.JComboBox();
        testCheckboxLabel = new javax.swing.JLabel();
        xrayCheckbox = new javax.swing.JCheckBox();
        radiologicTestCheckbox = new javax.swing.JCheckBox();
        gynecologicalScreeningCheckbox = new javax.swing.JCheckBox();
        checkDonorResultStatusButton = new javax.swing.JButton();
        testResultSectionHeaderLabel = new javax.swing.JLabel();
        testSelectionHeaderLabel = new javax.swing.JLabel();
        donorComboName = new javax.swing.JComboBox();
        askDonorToTakeTestButton1 = new javax.swing.JButton();
        checkResultStatusButton1 = new javax.swing.JButton();
        testCheckboxLabel1 = new javax.swing.JLabel();
        testCheckboxLabel2 = new javax.swing.JLabel();
        testCheckboxLabel3 = new javax.swing.JLabel();
        requestPatientTest = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        patientEmailDropdownLabel2 = new javax.swing.JLabel();

        askToTakeTestButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        askToTakeTestButton.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        askToTakeTestButton.setText("Request Patient Test");
        askToTakeTestButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        askToTakeTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                askToTakeTestButtonActionPerformed(evt);
            }
        });

        setBackground(java.awt.SystemColor.activeCaption);
        setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N

        bloodTestCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        bloodTestCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bloodTestCheckbox.setText("Blood Test");

        cancerCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        cancerCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cancerCheckbox.setText("Cancer Screening");

        patientEmailDropdownLabel.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        patientEmailDropdownLabel.setText("Donor List");

        patientNameCombobox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        patientNameCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameComboboxActionPerformed(evt);
            }
        });

        testCheckboxLabel.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        testCheckboxLabel.setText("List Of Tests");

        xrayCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        xrayCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        xrayCheckbox.setText("Chest X-Ray and EKG");
        xrayCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xrayCheckboxActionPerformed(evt);
            }
        });

        radiologicTestCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        radiologicTestCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        radiologicTestCheckbox.setText("Radiologic Testing");
        radiologicTestCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiologicTestCheckboxActionPerformed(evt);
            }
        });

        gynecologicalScreeningCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        gynecologicalScreeningCheckbox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        gynecologicalScreeningCheckbox.setText("Gynecological screening");
        gynecologicalScreeningCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gynecologicalScreeningCheckboxActionPerformed(evt);
            }
        });

        checkDonorResultStatusButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        checkDonorResultStatusButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        checkDonorResultStatusButton.setText("Check Donor Reports");
        checkDonorResultStatusButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkDonorResultStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDonorResultStatusButtonActionPerformed(evt);
            }
        });

        testResultSectionHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        testResultSectionHeaderLabel.setText("View Test Results");

        testSelectionHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        testSelectionHeaderLabel.setText("Test Suggestion Panel");

        donorComboName.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        donorComboName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donorComboNameActionPerformed(evt);
            }
        });

        askDonorToTakeTestButton1.setBackground(java.awt.SystemColor.controlLtHighlight);
        askDonorToTakeTestButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        askDonorToTakeTestButton1.setText("Request Donor Test");
        askDonorToTakeTestButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        askDonorToTakeTestButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                askDonorToTakeTestButton1ActionPerformed(evt);
            }
        });

        checkResultStatusButton1.setBackground(java.awt.SystemColor.controlLtHighlight);
        checkResultStatusButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        checkResultStatusButton1.setText("Check Recipient Reports");
        checkResultStatusButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkResultStatusButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkResultStatusButton1ActionPerformed(evt);
            }
        });

        testCheckboxLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        testCheckboxLabel1.setText("Pathology Lab Tests");

        testCheckboxLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        testCheckboxLabel2.setText("Local Lab Tests");

        testCheckboxLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        testCheckboxLabel3.setText("Radiology Lab Tests");

        requestPatientTest.setBackground(java.awt.SystemColor.controlLtHighlight);
        requestPatientTest.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        requestPatientTest.setText("Request Patient Test");
        requestPatientTest.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        requestPatientTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestPatientTestActionPerformed(evt);
            }
        });

        backButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/left-arrow-in-circular-button-black-symbol-2.png"))); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        patientEmailDropdownLabel2.setFont(new java.awt.Font("Tahoma", 1, 21)); // NOI18N
        patientEmailDropdownLabel2.setText("Patient List");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 815, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(testResultSectionHeaderLabel)
                                .addGap(68, 68, 68))
                            .addComponent(checkResultStatusButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkDonorResultStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(testCheckboxLabel2)
                            .addComponent(bloodTestCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(testCheckboxLabel)
                            .addComponent(xrayCheckbox))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cancerCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(testCheckboxLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(testCheckboxLabel1)
                                .addGap(87, 87, 87))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radiologicTestCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(gynecologicalScreeningCheckbox)
                                .addGap(36, 36, 36))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(patientEmailDropdownLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146)
                        .addComponent(testSelectionHeaderLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientNameCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientEmailDropdownLabel)
                            .addComponent(donorComboName, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(requestPatientTest, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(askDonorToTakeTestButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testSelectionHeaderLabel))
                .addGap(77, 77, 77)
                .addComponent(patientEmailDropdownLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(requestPatientTest, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(patientEmailDropdownLabel)
                                .addGap(1, 1, 1)
                                .addComponent(donorComboName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(askDonorToTakeTestButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(patientNameCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(6, 6, 6)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(testCheckboxLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testCheckboxLabel2)
                    .addComponent(testCheckboxLabel3)
                    .addComponent(testCheckboxLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bloodTestCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(xrayCheckbox))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radiologicTestCheckbox)
                            .addComponent(gynecologicalScreeningCheckbox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancerCheckbox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testResultSectionHeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkResultStatusButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkDonorResultStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void askToTakeTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_askToTakeTestButtonActionPerformed
        if (!bloodTestCheckbox.isSelected() && !gynecologicalScreeningCheckbox.isSelected() && !cancerCheckbox.isSelected()
                && !radiologicTestCheckbox.isSelected() && !xrayCheckbox.isSelected()) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }

        if (patientNameCombobox.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "No patient selected!");
            return;
        }
        Recipient r = (Recipient) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex());
        r.setIsDocAssigned(true);
        r.setDocAssignedEmaild(account.getUsername());
        if (bloodTestCheckbox.isSelected() || xrayCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setMessage("Blood Test, Xray Requested");
            request.setSender(account);
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Patient");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InternalLabOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "A request has been sent to internal lab!");
        }
        if (gynecologicalScreeningCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setSender(account);
            request.setMessage("Gynecological Tests Requested");
            request.setStatus("Request Raised");
            request.setPatientType("Patient");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof PathologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to pathology lab!");
            }
        }
        if (cancerCheckbox.isSelected() || radiologicTestCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setSender(account);
            request.setMessage("Radiology Screening Requested");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Patient");
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to radiology lab!");
            }
        }
        xrayCheckbox.setSelected(false);
        radiologicTestCheckbox.setSelected(false);
        gynecologicalScreeningCheckbox.setSelected(false);
        bloodTestCheckbox.setSelected(false);
        cancerCheckbox.setSelected(false);

    }//GEN-LAST:event_askToTakeTestButtonActionPerformed

    private void checkDonorResultStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDonorResultStatusButtonActionPerformed
        List<String> testLists = new ArrayList<>();
        if (bloodTestCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (radiologicTestCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (xrayCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        String patientId = ((Donor) donorComboName.getItemAt(donorComboName.getSelectedIndex())).getPersonEmailId();
        ActivityAreaForDoctorPanel doctorActivityArea = new ActivityAreaForDoctorPanel(rightJPanel, account, enterprise, patientId, testLists, "Donor");
        rightJPanel.add("ActivityScreenForDoctor", doctorActivityArea);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.next(rightJPanel);

    }//GEN-LAST:event_checkDonorResultStatusButtonActionPerformed

    private void xrayCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xrayCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xrayCheckboxActionPerformed

    private void askDonorToTakeTestButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_askDonorToTakeTestButton1ActionPerformed
        // TODO add your handling code here:
        if (!bloodTestCheckbox.isSelected() && !gynecologicalScreeningCheckbox.isSelected() && !cancerCheckbox.isSelected()
                && !radiologicTestCheckbox.isSelected() && !xrayCheckbox.isSelected()) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }
        if (donorComboName.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "No donor selected!");
            return;
        }

        Donor r = (Donor) donorComboName.getItemAt(donorComboName.getSelectedIndex());
        r.setIsDocAssigned(true);
        r.setDocAssignedEmaild(account.getUsername());
        if (bloodTestCheckbox.isSelected() || xrayCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setMessage("Blood Test, Xray Requested");
            request.setSender(account);
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Donor");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InternalLabOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to internal lab!");
            }

        }
        if (gynecologicalScreeningCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setSender(account);
            request.setMessage("Gynecological Tests Requested");
            request.setStatus("Request Raised");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Donor");
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof PathologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to pathology lab!");
                System.out.println("Creating A Request For Pathology Lab For Patient:" + request.getPatientId());
            }
        }
        if (cancerCheckbox.isSelected() || radiologicTestCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setSender(account);
            request.setMessage("Requesting all screening for patient");
            request.setPatientType("Donor");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to radiology lab!");
            }
//            int count = 0;
            for (WorkRequest w : enterprise.getWorkQueue().getWorkRequestList()) {
                if (w instanceof DonorValidationWorkRequest) {
                    DonorValidationWorkRequest a = (DonorValidationWorkRequest) w;
                    if (r.getPersonEmailId().equalsIgnoreCase(a.getPatientId())) {
                        a.setStatus("Requested Lab Tests");
                    }
                }
            }
//            if (count == 0) {
//                {
//                    DonorValidationWorkRequest validationRequest = new DonorValidationWorkRequest();
//                    Donor d = (Donor) donorComboName.getItemAt(donorComboName.getSelectedIndex());
//                    validationRequest.setStatus("Validation In Progress");
//                    validationRequest.setMessage("Awaiting Test Results");
//                    validationRequest.setSender(account);
//                    validationRequest.setReceiverName(enterprise.getName());
//                    validationRequest.setPatientName(d.getPersonName());
//                    validationRequest.setPatientId(d.getPersonEmailId());
//                    if (enterprise != null) {
//                        enterprise.getWorkQueue().getWorkRequestList().add(validationRequest);
//                        account.getWorkQueue().getWorkRequestList().add(validationRequest);
//                    }
//                }
//            }
        }
        xrayCheckbox.setSelected(false);
        radiologicTestCheckbox.setSelected(false);
        gynecologicalScreeningCheckbox.setSelected(false);
        bloodTestCheckbox.setSelected(false);
        cancerCheckbox.setSelected(false);
    }//GEN-LAST:event_askDonorToTakeTestButton1ActionPerformed

    private void checkResultStatusButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkResultStatusButton1ActionPerformed
        // TODO add your handling code here:
        List<String> testLists = new ArrayList<>();
        if (bloodTestCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (radiologicTestCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (xrayCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        Recipient patient = (Recipient) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex());
        String patientId = patient.getPersonEmailId();
        ActivityAreaForDoctorPanel doctorActivityArea = new ActivityAreaForDoctorPanel(rightJPanel, account, enterprise, patientId, testLists, "Patient");
        rightJPanel.add("ActivityScreenForDoctor", doctorActivityArea);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.next(rightJPanel);
    }//GEN-LAST:event_checkResultStatusButton1ActionPerformed

    private void patientNameComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameComboboxActionPerformed
        // TODO add your handling code here: 

    }//GEN-LAST:event_patientNameComboboxActionPerformed

    private void gynecologicalScreeningCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gynecologicalScreeningCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gynecologicalScreeningCheckboxActionPerformed

    private void radiologicTestCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiologicTestCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radiologicTestCheckboxActionPerformed

    private void requestPatientTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestPatientTestActionPerformed
        // TODO add your handling code here:
        if (!bloodTestCheckbox.isSelected() && !gynecologicalScreeningCheckbox.isSelected() && !cancerCheckbox.isSelected()
                && !radiologicTestCheckbox.isSelected() && !xrayCheckbox.isSelected()) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }
        Recipient r = (Recipient) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex());
        r.setIsDocAssigned(true);
        r.setDocAssignedEmaild(account.getUsername());
        if (bloodTestCheckbox.isSelected() || xrayCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setMessage("Blood Test, Xray Requested");
            request.setSender(account);
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Patient");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InternalLabOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to internal lab!");
            }

        }
        if (gynecologicalScreeningCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setSender(account);
            request.setMessage("Gynecological Tests Requested");
            request.setStatus("Request Raised");
            request.setPatientType("Patient");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof PathologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to pathology lab!");
            }
        }
        if (cancerCheckbox.isSelected() || radiologicTestCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Raised");
            request.setSender(account);
            request.setMessage("Radiology Screening Requested");
            request.setPatientName(r.getPersonName());
            request.setPatientId(r.getPersonEmailId());
            request.setPatientType("Patient");
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to radiology lab!");
            }
        }
        xrayCheckbox.setSelected(false);
        radiologicTestCheckbox.setSelected(false);
        gynecologicalScreeningCheckbox.setSelected(false);
        bloodTestCheckbox.setSelected(false);
        cancerCheckbox.setSelected(false);
    }//GEN-LAST:event_requestPatientTestActionPerformed

    private void donorComboNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donorComboNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_donorComboNameActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        rightJPanel.remove(this);
        Component[] componentArray = rightJPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout cardLayout = (CardLayout) rightJPanel.getLayout();
        cardLayout.previous(rightJPanel);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton askDonorToTakeTestButton1;
    private javax.swing.JButton askToTakeTestButton;
    private javax.swing.JButton backButton;
    private javax.swing.JCheckBox bloodTestCheckbox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cancerCheckbox;
    private javax.swing.JButton checkDonorResultStatusButton;
    private javax.swing.JButton checkResultStatusButton1;
    private javax.swing.JComboBox donorComboName;
    private javax.swing.JCheckBox gynecologicalScreeningCheckbox;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel patientEmailDropdownLabel;
    private javax.swing.JLabel patientEmailDropdownLabel2;
    private javax.swing.JComboBox patientNameCombobox;
    private javax.swing.JCheckBox radiologicTestCheckbox;
    private javax.swing.JButton requestPatientTest;
    private javax.swing.JLabel testCheckboxLabel;
    private javax.swing.JLabel testCheckboxLabel1;
    private javax.swing.JLabel testCheckboxLabel2;
    private javax.swing.JLabel testCheckboxLabel3;
    private javax.swing.JLabel testResultSectionHeaderLabel;
    private javax.swing.JLabel testSelectionHeaderLabel;
    private javax.swing.JCheckBox xrayCheckbox;
    // End of variables declaration//GEN-END:variables
}
