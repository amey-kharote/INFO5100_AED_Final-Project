/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorWorkspace;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.LabEnterprise;
import Business.Entity.Donor;
import Business.Entity.Recipient;
import Business.Network.Network;
import Business.Organization.InternalLabOrg;
import Business.Organization.Organization;
import Business.Organization.PathologyOrg;
import Business.Organization.RadiologyOrg;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DonorValidationWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Amey
 */
public class DoctorRequestPatientTestPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorRequestPatientTestPanel
     */
    JPanel rightJPanel;
    Enterprise enterprise;
    private UserAccount account;
    EcoSystem business;

    void populatePatientIdDropdown() {
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (Donor donorObj : org.getDonorDirectory().getDonorRecords()) {
                donorComboName.addItem(donorObj.getPersonEmailId().trim());
            }
            for (Recipient rObj : org.getRecipientDirectory().getRecipientRecords()) {
                patientNameCombobox.addItem(rObj.getPersonEmailId().trim());
            }
        }
    }

    public DoctorRequestPatientTestPanel(JPanel rightJPanel, Enterprise enterprise, UserAccount account, EcoSystem business) {
        initComponents();
        this.rightJPanel = rightJPanel;
        this.enterprise = enterprise;
        this.account = account;
        this.business = business;
        populatePatientIdDropdown();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bloodTestCheckbox = new javax.swing.JCheckBox();
        cancerCheckbox = new javax.swing.JCheckBox();
        askToTakeTestButton = new javax.swing.JButton();
        patientEmailDropdownLabel = new javax.swing.JLabel();
        patientNameCombobox = new javax.swing.JComboBox();
        testCheckboxLabel = new javax.swing.JLabel();
        xrayCheckbox = new javax.swing.JCheckBox();
        radiologicTestCheckbox = new javax.swing.JCheckBox();
        gynecologicalScreeningCheckbox = new javax.swing.JCheckBox();
        checkDonorResultStatusButton = new javax.swing.JButton();
        testResultSectionHeaderLabel = new javax.swing.JLabel();
        patientTestSectionHeaderLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        testSelectionHeaderLabel = new javax.swing.JLabel();
        patientEmailDropdownLabel1 = new javax.swing.JLabel();
        donorComboName = new javax.swing.JComboBox();
        askDonorToTakeTestButton1 = new javax.swing.JButton();
        checkResultStatusButton1 = new javax.swing.JButton();

        setBackground(java.awt.SystemColor.activeCaption);

        bloodTestCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        bloodTestCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        bloodTestCheckbox.setText("Blood Test");

        cancerCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        cancerCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        cancerCheckbox.setText("Cancer Screening");

        askToTakeTestButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        askToTakeTestButton.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        askToTakeTestButton.setText("Ask Patient To Take Test");
        askToTakeTestButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        askToTakeTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                askToTakeTestButtonActionPerformed(evt);
            }
        });

        patientEmailDropdownLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        patientEmailDropdownLabel.setText("Patient List");

        patientNameCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameComboboxActionPerformed(evt);
            }
        });

        testCheckboxLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        testCheckboxLabel.setText("Tests");

        xrayCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        xrayCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        xrayCheckbox.setText("Chest X-Ray and Electrocardiogram (EKG)");
        xrayCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xrayCheckboxActionPerformed(evt);
            }
        });

        radiologicTestCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        radiologicTestCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        radiologicTestCheckbox.setText("Radiologic Testing");

        gynecologicalScreeningCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        gynecologicalScreeningCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        gynecologicalScreeningCheckbox.setText("Gynecological screening");

        checkDonorResultStatusButton.setBackground(new java.awt.Color(153, 204, 255));
        checkDonorResultStatusButton.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        checkDonorResultStatusButton.setText("Validate Donor Status");
        checkDonorResultStatusButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkDonorResultStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDonorResultStatusButtonActionPerformed(evt);
            }
        });

        testResultSectionHeaderLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        testResultSectionHeaderLabel.setText("Test Result Section");

        patientTestSectionHeaderLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        patientTestSectionHeaderLabel.setText("Patient Information Section");

        testSelectionHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        testSelectionHeaderLabel.setText("Test Suggestion Panel");

        patientEmailDropdownLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        patientEmailDropdownLabel1.setText("Donor List");

        askDonorToTakeTestButton1.setBackground(new java.awt.Color(153, 204, 255));
        askDonorToTakeTestButton1.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        askDonorToTakeTestButton1.setText("Ask Donor To Take Test");
        askDonorToTakeTestButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        askDonorToTakeTestButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                askDonorToTakeTestButton1ActionPerformed(evt);
            }
        });

        checkResultStatusButton1.setBackground(new java.awt.Color(153, 204, 255));
        checkResultStatusButton1.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        checkResultStatusButton1.setText("Check Recipient Status");
        checkResultStatusButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkResultStatusButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkResultStatusButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(testResultSectionHeaderLabel)
                                .addGap(0, 816, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(xrayCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(radiologicTestCheckbox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(gynecologicalScreeningCheckbox))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(bloodTestCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(48, 48, 48)
                                                .addComponent(cancerCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 416, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(askToTakeTestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(askDonorToTakeTestButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(patientTestSectionHeaderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(testSelectionHeaderLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(testCheckboxLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(patientEmailDropdownLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(patientNameCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(patientEmailDropdownLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(donorComboName, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(checkDonorResultStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(74, 74, 74)
                    .addComponent(checkResultStatusButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(672, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(testSelectionHeaderLabel)
                        .addGap(59, 59, 59))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(patientTestSectionHeaderLabel)
                        .addGap(36, 36, 36)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(patientEmailDropdownLabel)
                        .addComponent(patientNameCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(patientEmailDropdownLabel1)
                        .addComponent(donorComboName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testCheckboxLabel)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bloodTestCheckbox)
                    .addComponent(cancerCheckbox))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radiologicTestCheckbox)
                    .addComponent(gynecologicalScreeningCheckbox))
                .addGap(31, 31, 31)
                .addComponent(xrayCheckbox)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(askToTakeTestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(askDonorToTakeTestButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(testResultSectionHeaderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(checkDonorResultStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(592, Short.MAX_VALUE)
                    .addComponent(checkResultStatusButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(58, 58, 58)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void askToTakeTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_askToTakeTestButtonActionPerformed
        System.out.println("Patient requested ro perform tests: " +(String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
        if (bloodTestCheckbox.isSelected() == false
                && gynecologicalScreeningCheckbox.isSelected() == false
                && cancerCheckbox.isSelected() == false) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }
        if (bloodTestCheckbox.isSelected() || xrayCheckbox.isSelected()) {
            System.out.println("Created Internal Lab Work Request For "+(String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Generated");
            request.setMessage("Requesting set of common tests!");
            request.setSender(account);
            request.setPatientName((String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            request.setPatientId((String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            request.setPatientType("Patient");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InternalLabOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "A request has been sent to internal lab!");
        }
        if (gynecologicalScreeningCheckbox.isSelected()) {
            System.out.println("Created Pathology Lab Work Request For "+(String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setSender(account);
            request.setMessage("Requesting all pathological tests for patient!");
            request.setStatus("Request Generated");
            request.setPatientName((String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            request.setPatientType("Patient");
            request.setPatientId((String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof PathologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to pathology lab!");
            }
        }
        if (cancerCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Generated");
            request.setSender(account);
            System.out.println("Created Radiology Lab Work Request For "+(String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            request.setMessage("Requesting all screening for patient");
            request.setPatientName((String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            request.setPatientId((String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            request.setPatientType("Patient");
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to radiology lab!");
            }
        }
        xrayCheckbox.setSelected(false);
        radiologicTestCheckbox.setSelected(false);
        gynecologicalScreeningCheckbox.setSelected(false);
        bloodTestCheckbox.setSelected(false);
        cancerCheckbox.setSelected(false);

    }//GEN-LAST:event_askToTakeTestButtonActionPerformed

    private void checkDonorResultStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDonorResultStatusButtonActionPerformed
        List<String> testLists = new ArrayList<>();
        if (bloodTestCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (radiologicTestCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (xrayCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        String patientId = (String) donorComboName.getItemAt(donorComboName.getSelectedIndex());
        ActivityAreaForDoctorPanel doctorActivityArea = new ActivityAreaForDoctorPanel(rightJPanel, account, enterprise, patientId, testLists, "Donor");
        rightJPanel.add("ActivityScreenForDoctor", doctorActivityArea);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.next(rightJPanel);

    }//GEN-LAST:event_checkDonorResultStatusButtonActionPerformed

    private void xrayCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xrayCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xrayCheckboxActionPerformed

    private void askDonorToTakeTestButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_askDonorToTakeTestButton1ActionPerformed
        // TODO add your handling code here:
        if (bloodTestCheckbox.isSelected() == false
                && gynecologicalScreeningCheckbox.isSelected() == false
                && cancerCheckbox.isSelected() == false) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }
        if (bloodTestCheckbox.isSelected() || xrayCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Generated");
            request.setMessage("Requesting set of common tests!");
            request.setSender(account);
            request.setPatientName((String) donorComboName.getItemAt(donorComboName.getSelectedIndex()));
            request.setPatientId((String) donorComboName.getItemAt(donorComboName.getSelectedIndex()));
            request.setPatientType("Donor");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InternalLabOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "A request has been sent to internal lab!");
        }
        if (gynecologicalScreeningCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setSender(account);
            request.setMessage("Requesting all pathological tests for patient!");
            request.setStatus("Request Generated");
            request.setPatientName((String) donorComboName.getItemAt(patientNameCombobox.getSelectedIndex()));
            request.setPatientId((String) donorComboName.getItemAt(donorComboName.getSelectedIndex()));
            request.setPatientType("Donor");
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof PathologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to pathology lab!");
                System.out.println("Creating A Request For Pathology Lab For Patient:" + request.getPatientId());
            }
        }
        if (cancerCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Generated");
            request.setSender(account);
            request.setMessage("Requesting all screening for patient");
            request.setPatientType("Donor");
            request.setPatientName((String) donorComboName.getItemAt(donorComboName.getSelectedIndex()));
            request.setPatientId((String) donorComboName.getItemAt(donorComboName.getSelectedIndex()));
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to radiology lab!");
                System.out.println("Creating A Request For Radiology Lab For Patient:" + request.getPatientId());
            }
            String patientIdObj = (String) donorComboName.getItemAt(donorComboName.getSelectedIndex());
            int count = 0;
            for (WorkRequest w : account.getWorkQueue().getWorkRequestList()) {
                if (w instanceof DonorValidationWorkRequest) {
                    DonorValidationWorkRequest a = (DonorValidationWorkRequest) w;
                    if (patientIdObj.equalsIgnoreCase(a.getPatientId())) {
                        count++;
                    }
                }
            }
            if (count == 0) {
                {
                    System.out.println("Created Donor Validation Work Request For Patient:" +patientIdObj);
                    DonorValidationWorkRequest validationRequest = new DonorValidationWorkRequest();
                    validationRequest.setStatus("Validation In Progress");
                    validationRequest.setMessage("Awaiting Test Results");
                    validationRequest.setSender(account);
                    validationRequest.setReceiverName(enterprise.getName());
                    validationRequest.setPatientName((String) donorComboName.getItemAt(donorComboName.getSelectedIndex()));
                    validationRequest.setPatientId((String) donorComboName.getItemAt(donorComboName.getSelectedIndex()));
                    if (enterprise != null) {
                        enterprise.getWorkQueue().getWorkRequestList().add(validationRequest);
                        account.getWorkQueue().getWorkRequestList().add(validationRequest);
                    }
                }
            }
        }
    }//GEN-LAST:event_askDonorToTakeTestButton1ActionPerformed

    private void checkResultStatusButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkResultStatusButton1ActionPerformed
        // TODO add your handling code here:
        List<String> testLists = new ArrayList<>();
        if (bloodTestCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (radiologicTestCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        if (xrayCheckbox.isSelected()) {
            testLists.add("Yes");
        } else {
            testLists.add("No");
        }
        String patientId = (String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex());
        ActivityAreaForDoctorPanel doctorActivityArea = new ActivityAreaForDoctorPanel(rightJPanel, account, enterprise, patientId, testLists, "Patient");
        rightJPanel.add("ActivityScreenForDoctor", doctorActivityArea);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.next(rightJPanel);
    }//GEN-LAST:event_checkResultStatusButton1ActionPerformed

    private void patientNameComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameComboboxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton askDonorToTakeTestButton1;
    private javax.swing.JButton askToTakeTestButton;
    private javax.swing.JCheckBox bloodTestCheckbox;
    private javax.swing.JCheckBox cancerCheckbox;
    private javax.swing.JButton checkDonorResultStatusButton;
    private javax.swing.JButton checkResultStatusButton1;
    private javax.swing.JComboBox donorComboName;
    private javax.swing.JCheckBox gynecologicalScreeningCheckbox;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel patientEmailDropdownLabel;
    private javax.swing.JLabel patientEmailDropdownLabel1;
    private javax.swing.JComboBox patientNameCombobox;
    private javax.swing.JLabel patientTestSectionHeaderLabel;
    private javax.swing.JCheckBox radiologicTestCheckbox;
    private javax.swing.JLabel testCheckboxLabel;
    private javax.swing.JLabel testResultSectionHeaderLabel;
    private javax.swing.JLabel testSelectionHeaderLabel;
    private javax.swing.JCheckBox xrayCheckbox;
    // End of variables declaration//GEN-END:variables
}
