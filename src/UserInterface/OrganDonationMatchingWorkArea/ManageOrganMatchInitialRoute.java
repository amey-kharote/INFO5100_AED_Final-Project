/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.OrganDonationMatchingWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Entity.Donor;
import Business.Entity.Recipient;
import Business.Network.Network;
import Business.Organization.Organization;
import UserInterface.SystemAdminWorkspace.ManageCitiesNetwork;
import UserInterface.SystemAdminWorkspace.SystemAdminDashboard;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Amey
 */
public class ManageOrganMatchInitialRoute extends javax.swing.JPanel {

    EcoSystem ecoSystem;
    JPanel panel;
    /**
     * Creates new form ManageOrganMatchInitialRoute
     */
    public ManageOrganMatchInitialRoute(EcoSystem ecoSystem, JPanel panel) {
        initComponents();
        this.ecoSystem = ecoSystem;
        this.panel = panel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matchOrganByApplicantButton = new javax.swing.JButton();
        matchOrganByRecipientButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setBackground(java.awt.SystemColor.activeCaption);

        matchOrganByApplicantButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        matchOrganByApplicantButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        matchOrganByApplicantButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/icons8-available-updates-32.png"))); // NOI18N
        matchOrganByApplicantButton.setText("Match Organ by Applicant Availability");
        matchOrganByApplicantButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        matchOrganByApplicantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchOrganByApplicantButtonActionPerformed(evt);
            }
        });

        matchOrganByRecipientButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        matchOrganByRecipientButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        matchOrganByRecipientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/icons8-available-updates-red.png"))); // NOI18N
        matchOrganByRecipientButton.setText("Match Organ by Recipient Severity");
        matchOrganByRecipientButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        matchOrganByRecipientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchOrganByRecipientButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(java.awt.SystemColor.controlLtHighlight);
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Images/left-arrow-in-circular-button-black-symbol-2.png"))); // NOI18N
        backButton.setText("Back");
        backButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matchOrganByRecipientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(matchOrganByApplicantButton, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(337, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84)
                .addComponent(matchOrganByApplicantButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(matchOrganByRecipientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(366, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void matchOrganByApplicantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchOrganByApplicantButtonActionPerformed

        List<Donor> donorL= createDonorsList();
        
        //Check if there are donors available
        if(donorL.size() > 0){
            OrganMatchByDonorPanel organM = new OrganMatchByDonorPanel(ecoSystem, panel, donorL);
            panel.add("organ", organM);
            CardLayout layout = (CardLayout) panel.getLayout();
            layout.next(panel);
        }else {
            JOptionPane.showMessageDialog(null, "There are currently no donors available in the system!!");
        }
    }//GEN-LAST:event_matchOrganByApplicantButtonActionPerformed
    
    //Method to create Donor List
    private List<Donor> createDonorsList() {
        
        List<Donor> donorL = new ArrayList();        
        for (Network network : ecoSystem.getNetworks()) {
            for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                if(e instanceof HospitalEnterprise){
                    for (Organization organization : e.getOrganizationDirectory().getOrganizationList()) {
                        if (organization.getName().equalsIgnoreCase("Applicant Org")) {
                            for (Donor donors : organization.getDonorDirectory().getDonorRecords()) {
                                if(donors.isIsOrganAvailable()){
                                    donors.setNetwork(network.getName());
                                    donorL.add(donors);
                                }
                            }
                        }

                    }
                }
                
            }
        }
        //Return the donor List
        return donorL;
    }
    
    
    private void matchOrganByRecipientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchOrganByRecipientButtonActionPerformed
        
        List<Recipient> rList = createRecipientsList();
        if(rList.size() > 0){
            OrganMatchByRecipientPanel organMatch = new OrganMatchByRecipientPanel(ecoSystem, panel, rList);
            panel.add("panel", organMatch);
            CardLayout layout = (CardLayout) panel.getLayout();
            layout.next(panel);
        }else {
            JOptionPane.showMessageDialog(null, "There are currently no Recipients alailable in the system");
        }
    }//GEN-LAST:event_matchOrganByRecipientButtonActionPerformed

    private List<Recipient> createRecipientsList(){
        List<Recipient> recipientL = new ArrayList<Recipient>();
        
        for (Network network : ecoSystem.getNetworks()) {
            for (Enterprise ents : network.getEnterpriseDirectory().getEnterpriseList()) {
                
                if(ents instanceof HospitalEnterprise){
                    for(Organization organization : ents.getOrganizationDirectory().getOrganizationList()){
                        if(organization.getName().equals("Applicant Organization")){
                            for( Recipient recp : organization.getRecipientDirectory().getRecipientRecords()){
                                  if(recp.getPriorityNo() > 0){
                                      recp.setNetwork(network.getName());
                                      recipientL.add(recp);
                                  }
                            }
                        }
                    }
                }
                
            }
        }
        
       // List<Map.Entry<String, Recipient>> list = new ArrayList<Map.Entry<String, Recipient>>(recipientList.entrySet());
        //sort recipient list by their sevirity
        Collections.sort(recipientL, new Comparator<Recipient>() {
            @Override
            public int compare(Recipient recipent1, Recipient recipent2) {
                return recipent1.compareTo(recipent2);
            }
        });
        
        return recipientL;
    }
    
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        SystemAdminDashboard manageCitiesNetwork = new SystemAdminDashboard(panel, ecoSystem);
        panel.add("manageCitiesJPanel", manageCitiesNetwork);
        CardLayout layout = (CardLayout) panel.getLayout();
        layout.next(panel);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton matchOrganByApplicantButton;
    private javax.swing.JButton matchOrganByRecipientButton;
    // End of variables declaration//GEN-END:variables
}
