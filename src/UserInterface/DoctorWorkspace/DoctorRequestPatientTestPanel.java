/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DoctorWorkspace;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.LabEnterprise;
import Business.Entity.Donor;
import Business.Entity.Recipient;
import Business.Network.Network;
import Business.Organization.InternalLabOrg;
import Business.Organization.Organization;
import Business.Organization.PathologyOrg;
import Business.Organization.RadiologyOrg;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Amey
 */
public class DoctorRequestPatientTestPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorRequestPatientTestPanel
     */
    JPanel rightJPanel;
    Enterprise enterprise;
    private UserAccount account;
    EcoSystem business;
    String patientType = "";

    void populatePatientIdDropdown() {
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (Donor donorObj : org.getDonorDirectory().getDonorRecords()) {
                patientNameCombobox.addItem(donorObj.getPersonEmailId().trim());
                patientType = "Donor";
            }
            for (Recipient rObj : org.getRecipientDirectory().getRecipientRecords()) {
                patientNameCombobox.addItem(rObj.getPersonEmailId().trim());
                patientType = "Recipient";
            }
        }
    }

    public DoctorRequestPatientTestPanel(JPanel rightJPanel, Enterprise enterprise, UserAccount account, EcoSystem business) {
        initComponents();
        this.rightJPanel = rightJPanel;
        this.enterprise = enterprise;
        this.account = account;
        this.business = business;
        populatePatientIdDropdown();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bloodTestCheckbox = new javax.swing.JCheckBox();
        cancerCheckbox = new javax.swing.JCheckBox();
        askToTakeTestButton = new javax.swing.JButton();
        patientEmailDropdownLabel = new javax.swing.JLabel();
        patientNameCombobox = new javax.swing.JComboBox();
        testCheckboxLabel = new javax.swing.JLabel();
        xrayCheckbox = new javax.swing.JCheckBox();
        radiologicTestCheckbox = new javax.swing.JCheckBox();
        gynecologicalScreeningCheckbox = new javax.swing.JCheckBox();
        checkResultStatusButton = new javax.swing.JButton();
        testResultSectionHeaderLabel = new javax.swing.JLabel();
        patientTestSectionHeaderLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        testSelectionHeaderLabel = new javax.swing.JLabel();

        setBackground(java.awt.SystemColor.activeCaption);

        bloodTestCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        bloodTestCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        bloodTestCheckbox.setText("Blood Test");

        cancerCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        cancerCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        cancerCheckbox.setText("Cancer Screening");

        askToTakeTestButton.setBackground(new java.awt.Color(153, 204, 255));
        askToTakeTestButton.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        askToTakeTestButton.setText("Ask To Take Test");
        askToTakeTestButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        askToTakeTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                askToTakeTestButtonActionPerformed(evt);
            }
        });

        patientEmailDropdownLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        patientEmailDropdownLabel.setText("Patient Information");

        testCheckboxLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        testCheckboxLabel.setText("Tests");

        xrayCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        xrayCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        xrayCheckbox.setText("Chest X-Ray and Electrocardiogram (EKG)");

        radiologicTestCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        radiologicTestCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        radiologicTestCheckbox.setText("Radiologic Testing");

        gynecologicalScreeningCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        gynecologicalScreeningCheckbox.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        gynecologicalScreeningCheckbox.setText("Gynecological screening");

        checkResultStatusButton.setBackground(new java.awt.Color(153, 204, 255));
        checkResultStatusButton.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        checkResultStatusButton.setText("Click to Check Result Status");
        checkResultStatusButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkResultStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkResultStatusButtonActionPerformed(evt);
            }
        });

        testResultSectionHeaderLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        testResultSectionHeaderLabel.setText("Test Result Section");

        patientTestSectionHeaderLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        patientTestSectionHeaderLabel.setText("Patient Information Section");

        testSelectionHeaderLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        testSelectionHeaderLabel.setText("Test Selection Panel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(356, 356, 356)
                .addComponent(testSelectionHeaderLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkResultStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(testResultSectionHeaderLabel)
                            .addComponent(patientTestSectionHeaderLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(patientEmailDropdownLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patientNameCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(testCheckboxLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(xrayCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(askToTakeTestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(radiologicTestCheckbox)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(gynecologicalScreeningCheckbox))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(bloodTestCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(48, 48, 48)
                                            .addComponent(cancerCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 416, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testSelectionHeaderLabel)
                .addGap(27, 27, 27)
                .addComponent(patientTestSectionHeaderLabel)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNameCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientEmailDropdownLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testCheckboxLabel)
                    .addComponent(bloodTestCheckbox)
                    .addComponent(cancerCheckbox))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radiologicTestCheckbox)
                    .addComponent(gynecologicalScreeningCheckbox))
                .addGap(31, 31, 31)
                .addComponent(xrayCheckbox)
                .addGap(34, 34, 34)
                .addComponent(askToTakeTestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(testResultSectionHeaderLabel)
                .addGap(50, 50, 50)
                .addComponent(checkResultStatusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void askToTakeTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_askToTakeTestButtonActionPerformed
        if (bloodTestCheckbox.isSelected() == false
                && xrayCheckbox.isSelected() == false
                && radiologicTestCheckbox.isSelected() == false
                && gynecologicalScreeningCheckbox.isSelected() == false
                && cancerCheckbox.isSelected() == false) {
            JOptionPane.showMessageDialog(null, "Please advice some test!");
            return;
        }
        if (bloodTestCheckbox.isSelected() || xrayCheckbox.isSelected() || radiologicTestCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Generated");
            request.setMessage("Requesting tests for patient!");
            request.setSender(account);
            request.setPatientName((String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof InternalLabOrg) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            JOptionPane.showMessageDialog(null, "A request has been sent to internal lab!");
        }
        if (gynecologicalScreeningCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setSender(account);
            request.setMessage("Requesting screening for patient!");
            request.setStatus("Request Generated");
            request.setPatientName((String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof PathologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to pathology lab!");
            }
        }
        if (cancerCheckbox.isSelected()) {
            LabTestWorkRequest request = new LabTestWorkRequest();
            request.setStatus("Request Generated");
            request.setSender(account);
            request.setMessage("Requesting screening for patient");
            request.setPatientName((String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex()));
            Organization orgObj = null;
            for (Network networkObj : business.getNetworks()) {
                for (Enterprise eObj : networkObj.getEnterpriseDirectory().getEnterpriseList()) {
                    if (eObj instanceof LabEnterprise) {
                        for (Organization org : eObj.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof RadiologyOrg) {
                                orgObj = org;
                            }
                        }
                    }
                }
            }
            if (orgObj != null) {
                orgObj.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "A request has been sent to radiology lab!");
            }
        }
        xrayCheckbox.setSelected(false);
        radiologicTestCheckbox.setSelected(false);
        gynecologicalScreeningCheckbox.setSelected(false);
        bloodTestCheckbox.setSelected(false);
        cancerCheckbox.setSelected(false);

    }//GEN-LAST:event_askToTakeTestButtonActionPerformed

    private void checkResultStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkResultStatusButtonActionPerformed
        List<String> testLists = new ArrayList<>();
        if (bloodTestCheckbox.isSelected()) testLists.add("Yes");
        else testLists.add("No");
        if (radiologicTestCheckbox.isSelected()) testLists.add("Yes");
        else testLists.add("No");
        if (xrayCheckbox.isSelected()) testLists.add("Yes"); else testLists.add("No");     
        String patientId = (String) patientNameCombobox.getItemAt(patientNameCombobox.getSelectedIndex());
        ActivityAreaForDoctorPanel doctorActivityArea = new ActivityAreaForDoctorPanel(rightJPanel, account,enterprise, patientId , testLists, patientType);
        rightJPanel.add("ActivityScreenForDoctor", doctorActivityArea);
        CardLayout layout = (CardLayout) rightJPanel.getLayout();
        layout.next(rightJPanel);

    }//GEN-LAST:event_checkResultStatusButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton askToTakeTestButton;
    private javax.swing.JCheckBox bloodTestCheckbox;
    private javax.swing.JCheckBox cancerCheckbox;
    private javax.swing.JButton checkResultStatusButton;
    private javax.swing.JCheckBox gynecologicalScreeningCheckbox;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel patientEmailDropdownLabel;
    private javax.swing.JComboBox patientNameCombobox;
    private javax.swing.JLabel patientTestSectionHeaderLabel;
    private javax.swing.JCheckBox radiologicTestCheckbox;
    private javax.swing.JLabel testCheckboxLabel;
    private javax.swing.JLabel testResultSectionHeaderLabel;
    private javax.swing.JLabel testSelectionHeaderLabel;
    private javax.swing.JCheckBox xrayCheckbox;
    // End of variables declaration//GEN-END:variables
}
